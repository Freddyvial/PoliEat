/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.ConexionDataBase;

/**
 *
 * @author ASUS
 */
public class frmGestionarMenus extends javax.swing.JFrame {
    Double valorTotal=0.0;
    int[] menu = new int[5] ;
    String cantidad="";
    private byte[] fotoObtenida;
   

    /**
     * Creates new form frmClientes
     */
    public frmGestionarMenus() {
        initComponents();

        try {
            cargarMenus();
            cargarMenuDelDia();
        } catch (SQLException ex) {
            Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMenu1 = new javax.swing.JLabel();
        lblMenu2 = new javax.swing.JLabel();
        lblMenu3 = new javax.swing.JLabel();
        lblMenu4 = new javax.swing.JLabel();
        lblMenu5 = new javax.swing.JLabel();
        lblNumMenu = new javax.swing.JLabel();
        txtNumeroMenu = new javax.swing.JTextField();
        lblCantidadMenu = new javax.swing.JLabel();
        txtCantidadMenu = new javax.swing.JTextField();
        lblOtroMenu = new javax.swing.JLabel();
        btnSi = new javax.swing.JButton();
        btnNo = new javax.swing.JButton();
        cbxMenu1 = new javax.swing.JComboBox<>();
        cbxMenu2 = new javax.swing.JComboBox<>();
        cbxMenu3 = new javax.swing.JComboBox<>();
        cbxMenu4 = new javax.swing.JComboBox<>();
        cbxMenu5 = new javax.swing.JComboBox<>();
        btnCambiarMenu = new javax.swing.JButton();
        lblNomMenu1 = new javax.swing.JLabel();
        lblNomMenu2 = new javax.swing.JLabel();
        lblNomMenu3 = new javax.swing.JLabel();
        lblNomMenu4 = new javax.swing.JLabel();
        lblNomMenu5 = new javax.swing.JLabel();
        txtIdMenu1 = new javax.swing.JTextField();
        txtIdMenu2 = new javax.swing.JTextField();
        txtIdMenu3 = new javax.swing.JTextField();
        txtIdMenu4 = new javax.swing.JTextField();
        txtIdMenu5 = new javax.swing.JTextField();

        lblMenu1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblMenu2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblMenu3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblMenu4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblMenu5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblNumMenu.setText("NÚMERO DEL MENÚ:");

        lblCantidadMenu.setText("CANTIDAD DE MENÚ:");

        lblOtroMenu.setText("¿DESEA OTRO MENU?");

        btnSi.setText("SI");
        btnSi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiActionPerformed(evt);
            }
        });

        btnNo.setText("NO");
        btnNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoActionPerformed(evt);
            }
        });

        cbxMenu1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxMenu1ItemStateChanged(evt);
            }
        });
        cbxMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMenu1ActionPerformed(evt);
            }
        });

        cbxMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMenu2ActionPerformed(evt);
            }
        });

        cbxMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMenu3ActionPerformed(evt);
            }
        });

        cbxMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMenu4ActionPerformed(evt);
            }
        });

        cbxMenu5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMenu5ActionPerformed(evt);
            }
        });

        btnCambiarMenu.setText("CAMBIAR MENU");
        btnCambiarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarMenuActionPerformed(evt);
            }
        });

        lblNomMenu1.setText("Menu 1");

        lblNomMenu2.setText("Menu 2");

        lblNomMenu3.setText("Menu 3");

        lblNomMenu4.setText("Menu 4");

        lblNomMenu5.setText("Menu 5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblOtroMenu)
                            .addComponent(lblCantidadMenu)
                            .addComponent(lblNumMenu))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNo))
                            .addComponent(txtCantidadMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNumeroMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(btnCambiarMenu)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxMenu3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdMenu3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblMenu3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxMenu4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdMenu4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblMenu4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(116, 116, 116)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbxMenu5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdMenu5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblMenu5, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(lblNomMenu1)
                        .addGap(130, 130, 130)
                        .addComponent(lblNomMenu2)
                        .addGap(107, 107, 107)
                        .addComponent(lblNomMenu3)))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(lblNomMenu5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblNomMenu4)
                .addGap(136, 136, 136))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNomMenu1)
                    .addComponent(lblNomMenu2)
                    .addComponent(lblNomMenu3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblMenu1, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                    .addComponent(lblMenu3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMenu2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMenu3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdMenu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdMenu2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdMenu3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNomMenu4)
                    .addComponent(lblNomMenu5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMenu4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMenu5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxMenu4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIdMenu4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIdMenu5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNumeroMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumMenu))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCantidadMenu)
                            .addComponent(txtCantidadMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOtroMenu)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnSi)
                                .addComponent(btnNo))))
                    .addComponent(cbxMenu5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCambiarMenu)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiActionPerformed
        int id=0;
        if(txtNumeroMenu.getText().equals("1")){
            id=Integer.parseInt(txtIdMenu1.getText());
        }
        if(txtNumeroMenu.getText().equals("2")){
            id=Integer.parseInt(txtIdMenu2.getText());
        }
        if(txtNumeroMenu.getText().equals("3")){
            id=Integer.parseInt(txtIdMenu3.getText());
        }
        if(txtNumeroMenu.getText().equals("4")){
            id=Integer.parseInt(txtIdMenu4.getText());
        }
        if(txtNumeroMenu.getText().equals("5")){
            id=Integer.parseInt(txtIdMenu5.getText());
        }
        
       
        try {
            double costoMenu= obtenerCostoMenu(obtenerNombreMenu(id));
            double cantidadMenu= Double.parseDouble(txtCantidadMenu.getText());
            valorTotal += costoMenu*cantidadMenu;
         
            cantidad = cantidad+txtCantidadMenu.getText();
            txtNumeroMenu.setText("");
            txtCantidadMenu.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        


    }//GEN-LAST:event_btnSiActionPerformed

    private void btnNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoActionPerformed
        try {
            guardarPedido();           
        } catch (SQLException ex) {
            Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnNoActionPerformed

    private void btnCambiarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarMenuActionPerformed

        try (Connection con = ConexionDataBase.getConection();) {
            PreparedStatement ps;
            ps = (PreparedStatement) con.prepareStatement("UPDATE menudia SET menuUno=?,menuDos=?,menuTres=?,menuCuatro=?,menuCinco=?, cantidad=? WHERE id=1");
            ps.setInt(1, Integer.parseInt(txtIdMenu1.getText()));                      
            ps.setInt(2, Integer.parseInt(txtIdMenu2.getText()));
            ps.setInt(3, Integer.parseInt(txtIdMenu3.getText()));
            ps.setInt(4, Integer.parseInt(txtIdMenu4.getText()));
            ps.setInt(5, Integer.parseInt(txtIdMenu5.getText()));                      
            ps.setString(6, llevarVectorId());
            ps.executeUpdate();

        } catch (Exception e) {
            try {
                throw new SQLException(e);
            } catch (SQLException ex) {
                Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_btnCambiarMenuActionPerformed

    @SuppressWarnings("null")
    private void cbxMenu1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMenu1ItemStateChanged


    }//GEN-LAST:event_cbxMenu1ItemStateChanged


    private void cbxMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMenu1ActionPerformed
        if (cbxMenu1.getSelectedItem().toString().equals("Selecciona Menu")) {

        } else {
            String menuBuscado;
            menuBuscado = cbxMenu1.getSelectedItem().toString();
            try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto,id FROM menu WHERE nombre=?");
                ps.setString(1, menuBuscado);
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");
                    txtIdMenu1.setText(rs.getString("id"));

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu1.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }


    }//GEN-LAST:event_cbxMenu1ActionPerformed

    private void cbxMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMenu2ActionPerformed
        if (cbxMenu2.getSelectedItem().toString().equals("Selecciona Menu")) {

        } else {
            String menuBuscado;
            menuBuscado = cbxMenu2.getSelectedItem().toString();
            try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto,id FROM menu WHERE nombre=?");
                ps.setString(1, menuBuscado);
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");
                    txtIdMenu2.setText(rs.getString("id"));
                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu2.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_cbxMenu2ActionPerformed

    private void cbxMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMenu3ActionPerformed
        if (cbxMenu3.getSelectedItem().toString().equals("Selecciona Menu")) {

        } else {
            String menuBuscado;
            menuBuscado = cbxMenu3.getSelectedItem().toString();
            try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto,id FROM menu WHERE nombre=?");
                ps.setString(1, menuBuscado);
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");
                    txtIdMenu3.setText(rs.getString("id"));

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu3.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_cbxMenu3ActionPerformed

    private void cbxMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMenu4ActionPerformed
        if (cbxMenu4.getSelectedItem().toString().equals("Selecciona Menu")) {

        } else {
            String menuBuscado;
            menuBuscado = cbxMenu4.getSelectedItem().toString();
            try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto,id FROM menu WHERE nombre=?");
                ps.setString(1, menuBuscado);
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");
                    txtIdMenu4.setText(rs.getString("id"));

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu4.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_cbxMenu4ActionPerformed

    private void cbxMenu5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMenu5ActionPerformed
        if (cbxMenu5.getSelectedItem().toString().equals("Selecciona Menu")) {

        } else {
            String menuBuscado;
            menuBuscado = cbxMenu5.getSelectedItem().toString();
            try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto,id FROM menu WHERE nombre=?");
                ps.setString(1, menuBuscado);
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");
                    txtIdMenu5.setText(rs.getString("id"));

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu5.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_cbxMenu5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmGestionarMenus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmGestionarMenus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmGestionarMenus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmGestionarMenus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmGestionarMenus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnCambiarMenu;
    public javax.swing.JButton btnNo;
    public javax.swing.JButton btnSi;
    public javax.swing.JComboBox<String> cbxMenu1;
    public javax.swing.JComboBox<String> cbxMenu2;
    public javax.swing.JComboBox<String> cbxMenu3;
    public javax.swing.JComboBox<String> cbxMenu4;
    public javax.swing.JComboBox<String> cbxMenu5;
    public javax.swing.JLabel lblCantidadMenu;
    public javax.swing.JLabel lblMenu1;
    public javax.swing.JLabel lblMenu2;
    public javax.swing.JLabel lblMenu3;
    public javax.swing.JLabel lblMenu4;
    public javax.swing.JLabel lblMenu5;
    public javax.swing.JLabel lblNomMenu1;
    public javax.swing.JLabel lblNomMenu2;
    public javax.swing.JLabel lblNomMenu3;
    public javax.swing.JLabel lblNomMenu4;
    public javax.swing.JLabel lblNomMenu5;
    public javax.swing.JLabel lblNumMenu;
    public javax.swing.JLabel lblOtroMenu;
    public javax.swing.JTextField txtCantidadMenu;
    public javax.swing.JTextField txtIdMenu1;
    public javax.swing.JTextField txtIdMenu2;
    public javax.swing.JTextField txtIdMenu3;
    public javax.swing.JTextField txtIdMenu4;
    public javax.swing.JTextField txtIdMenu5;
    public javax.swing.JTextField txtNumeroMenu;
    // End of variables declaration//GEN-END:variables

    public String obtenerNombreMenu(int id) throws SQLException{
        String nombreMenu="";
        try (Connection con = ConexionDataBase.getConection();) {
            PreparedStatement ps = null;
            ResultSet rs = null;
            ps = (PreparedStatement) con.prepareStatement("SELECT nombre FROM menu WHERE id=?");
            ps.setString(1, String.valueOf(id));
            rs = ps.executeQuery();
            while (rs.next()) {
                nombreMenu = rs.getString("nombre");
            }

        } catch (Exception e) {
            throw new SQLException(e);
        }
        
        
        
        
        return nombreMenu;
    }
    private void cargarMenus() throws SQLException {
        String idMenus = "";
        try (Connection con = ConexionDataBase.getConection();) {
            PreparedStatement ps;
            ResultSet rs = null;
            String sql = "SELECT nombre FROM menu";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();

            cbxMenu1.addItem("Selecciona Menu");
            cbxMenu2.addItem("Selecciona Menu");
            cbxMenu3.addItem("Selecciona Menu");
            cbxMenu4.addItem("Selecciona Menu");
            cbxMenu5.addItem("Selecciona Menu");

            while (rs.next()) {
                cbxMenu1.addItem(rs.getString("nombre"));
                cbxMenu2.addItem(rs.getString("nombre"));
                cbxMenu3.addItem(rs.getString("nombre"));
                cbxMenu4.addItem(rs.getString("nombre"));
                cbxMenu5.addItem(rs.getString("nombre"));

            }

        } catch (Exception e) {
            throw new SQLException(e);
        }
    }

    public void idsMenusDelDia(String idMenus) {
        int[] ids = obtenerCantidades(idMenus);

        txtIdMenu1.setText(String.valueOf(ids[0]));
        txtIdMenu2.setText(String.valueOf(ids[1]));
        txtIdMenu3.setText(String.valueOf(ids[2]));
        txtIdMenu4.setText(String.valueOf(ids[3]));
        txtIdMenu5.setText(String.valueOf(ids[4]));
    }

    private int obtenerClave() throws SQLException {
        int id=0;
        try (Connection con = ConexionDataBase.getConection();) {
            PreparedStatement ps;
            ResultSet rs = null;
            String sql = "select id from pedido order by  id desc limit 1";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();

            while (rs.next()) {
              id=rs.getInt("id");

            }

        } catch (Exception e) {
            throw new SQLException(e);
        }
        return id +1;    
    }
    public Double obtenerCostoMenu(String nombre) throws SQLException {
        Double costoMenu = 0.0;
        try (Connection con = ConexionDataBase.getConection();) {
            PreparedStatement ps = null;
            ResultSet rs = null;
            ps = (PreparedStatement) con.prepareStatement("SELECT precioVenta FROM menu WHERE nombre=?");
            ps.setString(1, nombre);
            rs = ps.executeQuery();
            while (rs.next()) {
                costoMenu = rs.getDouble("precioVenta");
            }

        } catch (Exception e) {
            throw new SQLException(e);
        }
        return costoMenu;
    }

    private void guardarPedido() throws SQLException {
        int idPedido=obtenerClave();
        try (Connection con = ConexionDataBase.getConection();) {
            PreparedStatement ps;
            ps = (PreparedStatement) con.prepareStatement("INSERT INTO pedido (clave,cantidad,valorTotal,estado) VALUES(?,?,?,?)");
            
            ps.setString(1, String.valueOf(idPedido));
            ps.setString(2, String.valueOf(cantidad));
            ps.setString(3, String.valueOf(valorTotal));
            ps.setString(4, "En Preparacion");
            ps.executeUpdate();

        } catch (Exception e) {
            throw new SQLException(e);
        }
        
                int[] ids =obtenerCantidades(llevarVectorId());              
                guardarMenuPedido(ids, idPedido);
                
                JOptionPane.showMessageDialog(null, "Tu turno es el: "+idPedido);
        
    }
    public boolean guardarMenuPedido(int[] idMenu, int idPedido) throws SQLException {
        try (Connection con = ConexionDataBase.getConection();) {
            for (int i = 0; i < idMenu.length; i++) {
                PreparedStatement ps;
                ps = (PreparedStatement) con.prepareStatement("INSERT INTO menupedido (idMenu,idPedido) VALUES(?,?)");
                ps.setString(1, String.valueOf(idMenu[i]));
                ps.setString(2, String.valueOf(idPedido));
                ps.executeUpdate();
            }

        } catch (Exception e) {
            throw new SQLException(e);
        }
        return true;

    }
    public int obtenerIdPedido(int clave) throws SQLException {
        int idProducto = 0;
        try (Connection con = ConexionDataBase.getConection();) {
            PreparedStatement ps = null;
            ResultSet rs = null;
            ps = (PreparedStatement) con.prepareStatement("SELECT id FROM pedido WHERE clave=?");
            ps.setString(1, String.valueOf(clave));
            rs = ps.executeQuery();
            while (rs.next()) {
                idProducto = rs.getInt("id");
            }

        } catch (Exception e) {
            throw new SQLException(e);
        }
        return idProducto;
    }

   

    

    private String llevarVectorId() {
        String cant;
        cant = txtIdMenu1.getText() + txtIdMenu2.getText() + txtIdMenu3.getText() + txtIdMenu4.getText() + txtIdMenu5.getText();

        return cant;

    }

    public int[] obtenerCantidades(String cantidades) {
        char[] stringToCharArray = cantidades.toCharArray();
        int[] vectorCantidad = new int[(stringToCharArray.length)];
        for (int i = 0; i < (stringToCharArray.length); i++) {
            vectorCantidad[i] = Character.getNumericValue(stringToCharArray[(i)]);

        }
        return vectorCantidad;
    }

    
    private void cargarMenuDelDia() throws SQLException {
        int menuUno=0;
        int menuDos=0;
        int menuTres=0;
        int menuCuatro=0;
        int menuCinco=0;
        String ids="";
        try (Connection con = ConexionDataBase.getConection();) {           
                PreparedStatement ps = null;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT * FROM menudia WHERE id=1");                
                rs = ps.executeQuery();                
                while (rs.next()) {
                    menuUno =rs.getInt("menuUno");
                    menuDos =rs.getInt("menuDos");
                    menuTres =rs.getInt("menuTres");
                    menuCuatro =rs.getInt("menuCuatro");
                    menuCinco =rs.getInt("menuCinco");
                    ids= rs.getString("cantidad");

                
            }
               idsMenusDelDia(ids);

        } catch (Exception e) {
            throw new SQLException(e);
        }
        try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto FROM menu WHERE id=?");
                ps.setString(1, String.valueOf(menuUno));
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");                   

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu1.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto FROM menu WHERE id=?");
                ps.setString(1, String.valueOf(menuDos));
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");                   

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu2.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto FROM menu WHERE id=?");
                ps.setString(1, String.valueOf(menuTres));
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");                   

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu3.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto FROM menu WHERE id=?");
                ps.setString(1, String.valueOf(menuCuatro));
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");                   

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu4.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        try (Connection con = ConexionDataBase.getConection();) {
                PreparedStatement ps;
                ResultSet rs = null;
                ps = (PreparedStatement) con.prepareStatement("SELECT foto FROM menu WHERE id=?");
                ps.setString(1, String.valueOf(menuCinco));
                rs = ps.executeQuery();

                if (rs.next()) {
                    fotoObtenida = rs.getBytes("foto");                   

                }
                Image foto = new ImageIcon(fotoObtenida).getImage();
                foto = foto.getScaledInstance(110, 110, Image.SCALE_DEFAULT);
                lblMenu5.setIcon(new ImageIcon(foto));

            } catch (Exception e) {
                try {
                    throw new SQLException(e);
                } catch (SQLException ex) {
                    Logger.getLogger(frmGestionarMenus.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        
    }
}
